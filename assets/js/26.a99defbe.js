(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{342:function(e,a,s){e.exports=s.p+"assets/img/git.88588fe2.png"},405:function(e,a,s){"use strict";s.r(a);var t=s(25),n=Object(t.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"git-refresh-ðŸš€"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-refresh-ðŸš€"}},[e._v("#")]),e._v(" Git refresh ðŸš€")]),e._v(" "),a("h2",{attrs:{id:"git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[e._v("#")]),e._v(" Git")]),e._v(" "),a("p",[a("strong",[e._v("Git")]),e._v(" is a version control system that helps you manage changes to your source code over time. It allows multiple people to work on a project simultaneously and keeps track of changes so you can revert to earlier versions if needed.")]),e._v(" "),a("h3",{attrs:{id:"why-learn-git-on-the-command-line"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#why-learn-git-on-the-command-line"}},[e._v("#")]),e._v(" Why Learn Git on the Command Line?")]),e._v(" "),a("p",[e._v("In the world of software development, mastering Git through the command line is more than just a technical skill; it's a gateway to understanding the underlying mechanics of version control systems. While graphical user interfaces (GUIs) provide a user-friendly way to interact with Git, they often abstract away the complexity and depth of how Git functions. By learning Git on the command line, you gain a deeper appreciation of its capabilities, allowing you to troubleshoot issues more effectively and perform tasks with greater precision. Command line Git commands can offer more advanced functionality and flexibility than their GUI counterparts, making you a more proficient and versatile developer.")]),e._v(" "),a("p",[e._v("Many development environments and continuous integration systems rely on command line tools, and knowing how to use Git in this way can significantly enhance your workflow. Command line Git is universally applicable and often required in professional settings, where efficiency and control are paramount. By mastering Git on the command line, you not only equip yourself with a powerful tool for managing your code but also demonstrate a commitment to understanding and optimizing your development process. This foundational knowledge can set you apart in collaborative projects and open doors to more advanced Git functionalities that GUIs may not fully expose.")]),e._v(" "),a("h2",{attrs:{id:"key-concepts-in-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#key-concepts-in-git"}},[e._v("#")]),e._v(" Key Concepts in Git")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("Repository:")]),e._v(" A storage space for your project, which contains all the files and their history. It is the core unit of work in Git and can be local (on your machine) or remote (on a server like GitHub).")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Commit:")]),e._v(" A snapshot of your files at a particular point in time. Commits are used to track changes to the repository, and each commit has a unique identifier and metadata, including the author and commit message.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Branch:")]),e._v(" A parallel version of the repository. By default, every repository has a main branch called "),a("code",[e._v("main")]),e._v(" or "),a("code",[e._v("master")]),e._v(". Branches allow you to work on different features or bug fixes independently.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Fork:")]),e._v(" A personal copy of someone elseâ€™s repository. Forking a repository allows you to experiment and make changes without affecting the original project. It's often used in open source projects to propose changes or contribute new features.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Cloning:")]),e._v(" The process of creating a local copy of a remote repository. When you clone a repository, you download all the files and their history from the remote source to your local machine:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://github.com/username/repository.git\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Merging:")]),e._v(" The process of integrating changes from one branch into another. Merging combines the changes made in different branches and is typically used to bring new features or bug fixes into the main branch:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout main\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" merge feature-branch\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Rebasing:")]),e._v(" A process to move or combine a sequence of commits to a new base commit. Rebasing is often used to maintain a clean, linear project history by integrating changes from one branch onto another:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout feature-branch\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" rebase main\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])])])]),e._v(" "),a("p",[a("strong",[e._v("Getting Started with Git:")])]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("Install Git:")])]),e._v(" "),a("ul",[a("li",[e._v("Download and install Git from "),a("a",{attrs:{href:"https://git-scm.com/downloads",target:"_blank",rel:"noopener noreferrer"}},[e._v("Git's official website"),a("OutboundLink")],1),e._v(".")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Configure Git:")])]),e._v(" "),a("ul",[a("li",[e._v("Open your terminal or command prompt and configure your name and email:"),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--global")]),e._v(" user.name "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Your Name"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--global")]),e._v(" user.email "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"your.email@example.com"')]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])])])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Create a New Repository:")])]),e._v(" "),a("ul",[a("li",[e._v("Navigate to your project directory and initialize a new Git repository:"),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" path/to/your/project\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" init\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])])])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Add Files to the Repository:")])]),e._v(" "),a("ul",[a("li",[e._v("Add files to the staging area to prepare them for a commit:"),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Commit Changes:")])]),e._v(" "),a("ul",[a("li",[e._v("Commit the changes with a descriptive message:"),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-m")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Initial commit"')]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("View Commit History:")])]),e._v(" "),a("ul",[a("li",[e._v("Check the history of commits:"),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" log\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])])])]),e._v(" "),a("h3",{attrs:{id:"understanding-git-branching"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#understanding-git-branching"}},[e._v("#")]),e._v(" Understanding Git Branching")]),e._v(" "),a("p",[a("strong",[e._v("Branches")]),e._v(" allow you to work on different features or bug fixes simultaneously without affecting the main codebase.")]),e._v(" "),a("p",[a("strong",[e._v("Basic Branching Commands:")])]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("Create a New Branch:")])]),e._v(" "),a("ul",[a("li",[e._v("To create a new branch:"),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" branch new-feature\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Switch to a Branch:")])]),e._v(" "),a("ul",[a("li",[e._v("To switch to the new branch:"),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout new-feature\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Create and Switch to a Branch (Combined Command):")])]),e._v(" "),a("ul",[a("li",[e._v("You can create and switch to a new branch in one command:"),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-b")]),e._v(" new-feature\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("List All Branches:")])]),e._v(" "),a("ul",[a("li",[e._v("To view all branches:"),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" branch\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Merge a Branch:")])]),e._v(" "),a("ul",[a("li",[e._v("To merge changes from "),a("code",[e._v("new-feature")]),e._v(" branch into "),a("code",[e._v("main")]),e._v(":"),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout main\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" merge new-feature\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])])])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Delete a Branch:")])]),e._v(" "),a("ul",[a("li",[e._v("To delete a branch after merging:"),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v(" new-feature\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])])])]),e._v(" "),a("h3",{attrs:{id:"basic-github-usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basic-github-usage"}},[e._v("#")]),e._v(" Basic GitHub Usage")]),e._v(" "),a("p",[a("strong",[e._v("GitHub")]),e._v(" is a cloud-based platform that hosts Git repositories. It provides additional features like collaboration, issue tracking, and more.")]),e._v(" "),a("p",[a("strong",[e._v("Basic GitHub Commands:")])]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("Clone a Repository:")])]),e._v(" "),a("ul",[a("li",[e._v("To clone a repository from GitHub:"),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://github.com/username/repository.git\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Add a Remote Repository:")])]),e._v(" "),a("ul",[a("li",[e._v("To add a remote repository (e.g., GitHub) to your local repo:"),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" origin https://github.com/username/repository.git\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Push Changes to GitHub:")])]),e._v(" "),a("ul",[a("li",[e._v("To push your commits to GitHub:"),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push origin main\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Pull Changes from GitHub:")])]),e._v(" "),a("ul",[a("li",[e._v("To pull changes from GitHub to your local repository:"),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" pull origin main\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Fork a Repository:")])]),e._v(" "),a("ul",[a("li",[e._v('On GitHub, you can create your own copy of a repository by forking it. Navigate to the repository page and click the "Fork" button.')])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Create a Pull Request:")])]),e._v(" "),a("ul",[a("li",[e._v('After making changes in a forked repository, you can propose those changes to the original repository by creating a pull request. Go to your forked repository on GitHub, click "Compare & pull request," and follow the prompts.')])])])]),e._v(" "),a("p",[a("strong",[e._v("Example Workflow:")])]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("Clone the Repository:")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://github.com/username/repository.git\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Create a New Branch and Switch to It:")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-b")]),e._v(" feature-branch\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Make Changes and Commit Them:")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-m")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Add new feature"')]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Push the Branch to GitHub:")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push origin feature-branch\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Open a Pull Request on GitHub:")])]),e._v(" "),a("ul",[a("li",[e._v('Go to the repository on GitHub, navigate to the "Pull requests" tab, and create a new pull request from your feature branch.')])])])]),e._v(" "),a("h2",{attrs:{id:"branching-in-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#branching-in-git"}},[e._v("#")]),e._v(" Branching in Git")]),e._v(" "),a("p",[e._v("Branching is one of Git's most powerful features, allowing developers to work on separate lines of development within a single repository. It is essential for managing different features, bug fixes, or experimental work without affecting the main codebase.")]),e._v(" "),a("h3",{attrs:{id:"what-is-branching"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-is-branching"}},[e._v("#")]),e._v(" What is Branching?")]),e._v(" "),a("p",[e._v("A branch in Git represents a parallel version of the repository. By default, every repository starts with a branch named "),a("code",[e._v("main")]),e._v(" (or "),a("code",[e._v("master")]),e._v(" in older repositories). Branches allow you to diverge from the main line of development and work independently.")]),e._v(" "),a("h3",{attrs:{id:"creating-a-new-branch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-new-branch"}},[e._v("#")]),e._v(" Creating a New Branch")]),e._v(" "),a("p",[e._v("To create a new branch, you use the "),a("code",[e._v("git branch")]),e._v(" command followed by the branch name. This creates the branch but does not switch to it:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" branch new-feature\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("To create and switch to the new branch in one step, use:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-b")]),e._v(" new-feature\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"switching-between-branches"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#switching-between-branches"}},[e._v("#")]),e._v(" Switching Between Branches")]),e._v(" "),a("p",[e._v("To switch from your current branch to another, use:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout branch-name\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("For example, to switch to the "),a("code",[e._v("develop")]),e._v(" branch:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout develop\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"listing-branches"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#listing-branches"}},[e._v("#")]),e._v(" Listing Branches")]),e._v(" "),a("p",[e._v("To view all branches in your repository:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" branch\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("The branch you are currently on will be highlighted with an asterisk.")]),e._v(" "),a("h3",{attrs:{id:"merging-branches"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merging-branches"}},[e._v("#")]),e._v(" Merging Branches")]),e._v(" "),a("p",[e._v("After making changes on a branch, you may want to merge those changes back into another branch (e.g., "),a("code",[e._v("main")]),e._v("). First, switch to the branch you want to merge changes into:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout main\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("Then, merge the changes from the feature branch:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" merge new-feature\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("If there are conflicts (when changes in the branches overlap), Git will prompt you to resolve them manually before completing the merge.")]),e._v(" "),a("h3",{attrs:{id:"rebasing-branches"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rebasing-branches"}},[e._v("#")]),e._v(" Rebasing Branches")]),e._v(" "),a("p",[e._v("Rebasing is an alternative to merging that re-applies commits from one branch onto another. This results in a linear project history, which can be cleaner and easier to follow.")]),e._v(" "),a("p",[e._v("To rebase "),a("code",[e._v("feature-branch")]),e._v(" onto "),a("code",[e._v("main")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout feature-branch\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" rebase main\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("If conflicts arise during rebasing, resolve them and then continue the rebase process:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" rebase "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--continue")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"deleting-branches"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deleting-branches"}},[e._v("#")]),e._v(" Deleting Branches")]),e._v(" "),a("p",[e._v("After merging or if a branch is no longer needed, you can delete it. To delete a local branch:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v(" branch-name\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("To force delete a branch (e.g., if it hasn't been merged):")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-D")]),e._v(" branch-name\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("To delete a remote branch:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push origin "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--delete")]),e._v(" branch-name\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"example-workflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-workflow"}},[e._v("#")]),e._v(" Example Workflow")]),e._v(" "),a("p",[e._v("Here's a typical workflow using branching in Git:")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("Create a New Branch for a Feature:")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-b")]),e._v(" feature/new-login\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Work on the Feature and Commit Changes:")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Edit files and stage changes")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-m")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Add new login feature"')]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Switch Back to Main Branch:")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout main\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Merge the Feature Branch into Main:")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" merge feature/new-login\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Delete the Feature Branch (if no longer needed):")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v(" feature/new-login\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Push Changes to Remote Repository:")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push origin main\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])]),e._v(" "),a("p",[e._v("Branching is essential for managing and organizing your development work efficiently. It allows for isolated changes and a clean history, making it easier to collaborate and maintain a stable codebase. Understanding and using branches effectively will enhance your productivity and help you manage complex projects with ease.")]),e._v(" "),a("h2",{attrs:{id:"merging-in-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merging-in-git"}},[e._v("#")]),e._v(" Merging in Git")]),e._v(" "),a("p",[e._v("Merging is a fundamental concept in Git, used to integrate changes from one branch into another. This process allows multiple lines of development to be combined into a cohesive project, ensuring that all contributions are included in the main codebase. Understanding merging is crucial for effective collaboration and maintaining a clean project history.")]),e._v(" "),a("h3",{attrs:{id:"what-is-merging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-is-merging"}},[e._v("#")]),e._v(" What is Merging?")]),e._v(" "),a("p",[e._v("Merging is the process of taking the changes from one branch (often called a feature branch) and integrating them into another branch (usually the "),a("code",[e._v("main")]),e._v(" or "),a("code",[e._v("master")]),e._v(" branch). This is a common practice when you want to combine the work of different team members or finalize a feature.")]),e._v(" "),a("h3",{attrs:{id:"performing-a-merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#performing-a-merge"}},[e._v("#")]),e._v(" Performing a Merge")]),e._v(" "),a("p",[e._v("To merge changes from one branch into another, follow these steps:")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("Switch to the Target Branch:")]),e._v("\nFirst, you need to be on the branch that you want to merge changes into. For example, if you want to merge changes into the "),a("code",[e._v("main")]),e._v(" branch:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout main\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Merge the Source Branch:")]),e._v("\nPerform the merge operation by specifying the branch you want to merge from. For example, to merge "),a("code",[e._v("feature-branch")]),e._v(" into "),a("code",[e._v("main")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" merge feature-branch\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("Git will integrate the changes from "),a("code",[e._v("feature-branch")]),e._v(" into "),a("code",[e._v("main")]),e._v(". If there are no conflicts, the merge will be completed automatically.")])])]),e._v(" "),a("h3",{attrs:{id:"handling-merge-conflicts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#handling-merge-conflicts"}},[e._v("#")]),e._v(" Handling Merge Conflicts")]),e._v(" "),a("p",[e._v("Merge conflicts occur when changes in the branches overlap in a way that Git cannot automatically reconcile. If conflicts arise, Git will prompt you to resolve them manually:")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("Identify Conflicts:")]),e._v("\nGit marks conflicts in the affected files with special markers ("),a("code",[e._v("<<<<<<<")]),e._v(", "),a("code",[e._v("=======")]),e._v(", "),a("code",[e._v(">>>>>>>")]),e._v("):")]),e._v(" "),a("div",{staticClass:"language-plaintext line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plaintext"}},[a("code",[e._v("<<<<<<< HEAD\n// Changes from the current branch\n=======\n// Changes from the branch being merged\n>>>>>>> feature-branch\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Resolve Conflicts:")]),e._v("\nEdit the files to resolve the conflicts, removing the conflict markers and combining the changes as needed.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Mark Conflicts as Resolved:")]),e._v("\nAfter resolving conflicts, stage the resolved files:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" resolved-file.txt\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Complete the Merge:")]),e._v("\nContinue the merge process:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-m")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Resolve merge conflict"')]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])]),e._v(" "),a("h3",{attrs:{id:"fast-forward-vs-non-fast-forward-merges"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fast-forward-vs-non-fast-forward-merges"}},[e._v("#")]),e._v(" Fast-Forward vs. Non-Fast-Forward Merges")]),e._v(" "),a("p",[e._v("There are two types of merges:")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("Fast-Forward Merge:")]),e._v("\nIf the target branch has not diverged from the source branch, Git performs a fast-forward merge. This type of merge simply moves the branch pointer forward:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" merge feature-branch\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("The history will appear linear, as if all changes were made directly on the target branch.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Non-Fast-Forward Merge:")]),e._v("\nIf the target branch has diverged, Git performs a non-fast-forward merge, creating a merge commit to combine the branches. This preserves the history of both branches:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" merge feature-branch\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("The merge commit will have two parent commits and will show a branching history in the log.")])])]),e._v(" "),a("h3",{attrs:{id:"example-workflow-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-workflow-2"}},[e._v("#")]),e._v(" Example Workflow")]),e._v(" "),a("p",[e._v("Here's an example of a typical merge workflow:")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("Create and Work on a Feature Branch:")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-b")]),e._v(" feature/new-dashboard\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Make changes, commit them")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-m")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Add new dashboard feature"')]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Switch to Main Branch:")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout main\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Merge the Feature Branch into Main:")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" merge feature/new-dashboard\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Push the Changes to Remote Repository:")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push origin main\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Delete the Feature Branch (if no longer needed):")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-d")]),e._v(" feature/new-dashboard\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])]),e._v(" "),a("h3",{attrs:{id:"best-practices"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#best-practices"}},[e._v("#")]),e._v(" Best Practices")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Regular Merges:")]),e._v(" Merge frequently to keep branches up-to-date and reduce the risk of complex conflicts.")]),e._v(" "),a("li",[a("strong",[e._v("Descriptive Commit Messages:")]),e._v(" Use clear and descriptive commit messages, especially when resolving conflicts.")]),e._v(" "),a("li",[a("strong",[e._v("Review Changes:")]),e._v(" Review changes before merging to ensure that the integration aligns with project goals.")])]),e._v(" "),a("p",[e._v("Merging is a critical aspect of Git that enables effective collaboration and project management. By understanding and applying merging techniques, you can efficiently integrate contributions, handle conflicts, and maintain a well-organized project history.")]),e._v(" "),a("h2",{attrs:{id:"rebasing-in-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rebasing-in-git"}},[e._v("#")]),e._v(" Rebasing in Git")]),e._v(" "),a("p",[e._v("Rebasing is a powerful Git feature used to integrate changes from one branch onto another, resulting in a linear and clean project history. Unlike merging, which combines changes from different branches, rebasing re-applies commits from one branch onto another base commit. Understanding rebasing is essential for maintaining a streamlined project history and simplifying complex workflows.")]),e._v(" "),a("h3",{attrs:{id:"what-is-rebasing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-is-rebasing"}},[e._v("#")]),e._v(" What is Rebasing?")]),e._v(" "),a("p",[e._v("Rebasing involves moving or combining a sequence of commits from one branch to another base commit. This results in a linear commit history without the extra merge commits that can clutter the history. Rebasing is often used to update feature branches with the latest changes from the main branch or to tidy up commit history before merging into the main branch.")]),e._v(" "),a("h3",{attrs:{id:"performing-a-rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#performing-a-rebase"}},[e._v("#")]),e._v(" Performing a Rebase")]),e._v(" "),a("p",[e._v("To rebase a branch, follow these steps:")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("Switch to the Branch to Rebase:")]),e._v("\nFirst, switch to the branch that you want to rebase. For example, if you want to rebase "),a("code",[e._v("feature-branch")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout feature-branch\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Rebase onto the Target Branch:")]),e._v("\nRebase the current branch onto the target branch, such as "),a("code",[e._v("main")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" rebase main\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("Git will re-apply commits from "),a("code",[e._v("feature-branch")]),e._v(" onto the latest commit of "),a("code",[e._v("main")]),e._v(".")])])]),e._v(" "),a("h3",{attrs:{id:"handling-rebase-conflicts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#handling-rebase-conflicts"}},[e._v("#")]),e._v(" Handling Rebase Conflicts")]),e._v(" "),a("p",[e._v("Similar to merge conflicts, rebasing can result in conflicts when changes overlap:")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("Identify Conflicts:")]),e._v("\nConflicts will be marked in the affected files. Edit the files to resolve the conflicts.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Mark Conflicts as Resolved:")]),e._v("\nAfter resolving conflicts, stage the resolved files:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" resolved-file.txt\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Continue the Rebase:")]),e._v("\nContinue the rebase process after resolving conflicts:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" rebase "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--continue")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Abort the Rebase:")]),e._v("\nIf you encounter issues or decide not to proceed, you can abort the rebase and return to the original state:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" rebase "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--abort")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])]),e._v(" "),a("h3",{attrs:{id:"interactive-rebasing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interactive-rebasing"}},[e._v("#")]),e._v(" Interactive Rebasing")]),e._v(" "),a("p",[e._v("Interactive rebasing allows you to edit commits, reorder them, or squash multiple commits into one. This is useful for cleaning up commit history before merging:")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("Start Interactive Rebase:")]),e._v("\nBegin an interactive rebase of the last few commits (e.g., the last 5 commits):")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" rebase "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-i")]),e._v(" HEAD~5\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Edit the Rebase Todo List:")]),e._v("\nAn editor will open with a list of commits. You can change commands (e.g., "),a("code",[e._v("pick")]),e._v(", "),a("code",[e._v("squash")]),e._v(", "),a("code",[e._v("edit")]),e._v(") to modify the commit history.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Complete the Rebase:")]),e._v("\nAfter making changes, save and close the editor. Git will apply the changes according to your instructions.")])])]),e._v(" "),a("h3",{attrs:{id:"rebase-vs-merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rebase-vs-merge"}},[e._v("#")]),e._v(" Rebase vs. Merge")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Rebase:")]),e._v(" Creates a linear history by applying commits from one branch onto another. It is useful for keeping a clean history but rewrites commit history, which can be risky if not used carefully.")]),e._v(" "),a("li",[a("strong",[e._v("Merge:")]),e._v(" Combines branches and creates a merge commit, preserving the branch history. It is safer for preserving context but can result in a more complex commit history.")])]),e._v(" "),a("h3",{attrs:{id:"example-workflow-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-workflow-3"}},[e._v("#")]),e._v(" Example Workflow")]),e._v(" "),a("p",[e._v("Here's an example of using rebasing to update a feature branch:")]),e._v(" "),a("ol",[a("li",[a("p",[a("strong",[e._v("Create and Work on a Feature Branch:")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-b")]),e._v(" feature/new-ui\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Make changes and commit them")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-m")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Add new UI components"')]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Rebase the Feature Branch onto the Main Branch:")])]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout feature/new-ui\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" rebase main\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Resolve Any Conflicts:")]),e._v("\nIf conflicts arise, resolve them and continue the rebase:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" resolved-file.txt\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" rebase "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--continue")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Push the Rebased Branch to Remote:")]),e._v("\nIf the branch is already pushed to a remote repository, you may need to force push due to the rewritten history:")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push origin feature/new-ui "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--force")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])]),e._v(" "),a("h3",{attrs:{id:"best-practices-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#best-practices-2"}},[e._v("#")]),e._v(" Best Practices")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Rebase Before Merging:")]),e._v(" Rebase feature branches onto the main branch before merging to maintain a clean history.")]),e._v(" "),a("li",[a("strong",[e._v("Avoid Rebasing Shared Branches:")]),e._v(" Avoid rebasing branches that are shared with others, as it rewrites history and can cause conflicts.")]),e._v(" "),a("li",[a("strong",[e._v("Use Interactive Rebase for Cleanup:")]),e._v(" Use interactive rebase to clean up commit history and create a more readable commit log.")])]),e._v(" "),a("p",[e._v("Rebasing is a valuable tool for maintaining a clean and linear commit history. By understanding and applying rebasing techniques, you can streamline your workflows, integrate changes efficiently, and keep your project history organized.")]),e._v(" "),a("p",[e._v("Git and GitHub are essential tools for managing code changes and collaborating on projects.")]),e._v(" "),a("h3",{attrs:{id:"this-is-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this-is-git"}},[e._v("#")]),e._v(" This is Git")]),e._v(" "),a("p",[e._v("ï¿¼"),a("img",{attrs:{src:s(342),alt:"Git"}})]),e._v(" "),a("h3",{attrs:{id:"bookmarks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bookmarks"}},[e._v("#")]),e._v(" Bookmarks")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://cbea.ms/git-commit/",target:"_blank",rel:"noopener noreferrer"}},[e._v("How to Write a Git Commit Message"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://www.freecodecamp.org/news/git-cheat-sheet-and-best-practices-c6ce5321f52/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Here are all the Git commands I used last week, and what they do"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://sethrobertson.github.io/GitFixUm/fixup.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("On undoing, fixing, or removing commits in git"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://opensource.com/article/20/4/git-rebase-i",target:"_blank",rel:"noopener noreferrer"}},[e._v("The life-changing magic of git rebase -i"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);